#pragma once

#include "esphome/core/component.h"
#include "esphome/components/uart/uart.h"

#include "esphome/components/binary_sensor/binary_sensor.h"
#include "esphome/components/sensor/sensor.h"
#include "esphome/components/text_sensor/text_sensor.h"

// #include "HD_Globals.h"
// #include "HD_Utilities.h"
// #include "HD_H1comm.h"

// #include "esphome/components/h60_interface/fields.h"
// #include "esphome/components/h60_interface/util.h"

#include <memory>
#include <string>
#include <vector>


namespace esphome {
namespace h60_interface {

// H60_**_LIST generated by ESPHome and written in esphome/core/defines
#ifndef H60_BINARY_SENSOR_LIST
#define H60_BINARY_SENSOR_LIST(F, SEP)
#endif

#ifndef H60_SENSOR_LIST
#define H60_SENSOR_LIST(F, SEP)
#endif

#ifndef H60_TEXT_SENSOR_LIST
#define H60_TEXT_SENSOR_LIST(F, SEP)
#endif

// using MyData = ::h60::ParsedData<H60_TEXT_SENSOR_LIST(H60_DATA_SENSOR, H60_COMMA)>;

class H60InterfaceComponent : public esphome::Component {
public:
    H60InterfaceComponent() = default;
    explicit H60InterfaceComponent(esphome::uart::UARTComponent *stream) : stream_{stream} {}

    void setup() override;
    void loop() override;
    void dump_config() override;
    void on_shutdown() override;

    void publish_sensors() {
//     void publish_sensors(MyData &data) {
// #define H60_PUBLISH_BINARY_SENSOR(s) \
//         if (data.s##_present && this->s_##s##_ != nullptr) \
//         s_##s##_->publish_state(data.s);
//         H60_BINARY_SENSOR_LIST(H60_PUBLISH_BINARY_SENSOR, )

// #define H60_PUBLISH_SENSOR(s) \
//         if (data.s##_present && this->s_##s##_ != nullptr) \
//         s_##s##_->publish_state(data.s);
//         H60_SENSOR_LIST(H60_PUBLISH_SENSOR, )

// #define H60_PUBLISH_TEXT_SENSOR(s) \
//     if (data.s##_present && this->s_##s##_ != nullptr) \
//         s_##s##_->publish_state(data.s.c_str());
//         H60_TEXT_SENSOR_LIST(H60_PUBLISH_TEXT_SENSOR, )
    };

    void set_model(std::string model) {this->model_ = model; }
    void set_uart_parent(esphome::uart::UARTComponent *parent) { this->stream_ = parent; }
    void set_buffer_size(size_t size) { this->buf_size_ = size; }
    // void set_connected_sensor(esphome::binary_sensor::BinarySensor *connected) { this->connected_sensor_ = connected; }
    // void set_connection_count_sensor(esphome::sensor::Sensor *connection_count) { this->connection_count_sensor_ = connection_count; }

    float get_setup_priority() const override { return esphome::setup_priority::AFTER_WIFI; }

    // Sensor setters
// #define H60_SET_BINARY_SENSOR(s) \
//     void set_##s(binary_sensor::BinarySensor *sensor) { s_##s##_ = sensor; }
//     H60_BINARY_SENSOR_LIST(H60_SET_BINARY_SENSOR, )

// #define H60_SET_SENSOR(s) \
//     void set_##s(sensor::Sensor *sensor) { s_##s##_ = sensor; }
//     H60_SENSOR_LIST(H60_SET_SENSOR, )

// #define H60_SET_TEXT_SENSOR(s) \
//     void set_##s(text_sensor::TextSensor *sensor) { s_##s##_ = sensor; }
//     H60_TEXT_SENSOR_LIST(H60_SET_TEXT_SENSOR, )

protected:
    // void publish_sensors();

    void accept();
    void cleanup();
    void read();
    void flush();
    void write();

    size_t buf_index(size_t pos) { return pos & (this->buf_size_ - 1); }
    size_t buf_ahead(size_t pos) { return (pos | (this->buf_size_ - 1)) - pos + 1; }

    // typedef enum
    // {
    //     BINARY_SENSOR
    //     SENSOR,
    //     TEXT_SENSOR,
    // } entity_type;

    // struct Parameter {
    //     Parameter(std::int64_t reg, std::string identifier, size_t position);

    //     std::int64_t reg{};
    //     std::string identifier{};
    //     // bool disconnected{false};
    //     size_t position{0};
    // };

    // std::vector<Parameter> parameters_{};

    std::string model_;
    esphome::uart::UARTComponent *stream_{nullptr};
    size_t buf_size_;

    // Sensor member pointers
// #define H60_DECLARE_BINARY_SENSOR(s) binary_sensor::BinarySensor *s_##s##_{nullptr};
//     H60_BINARY_SENSOR_LIST(H60_DECLARE_BINARY_SENSOR, )

// #define H60_DECLARE_SENSOR(s) sensor::Sensor *s_##s##_{nullptr};
//     H60_SENSOR_LIST(H60_DECLARE_SENSOR, )

// #define H60_DECLARE_TEXT_SENSOR(s) text_sensor::TextSensor *s_##s##_{nullptr};
//     H60_TEXT_SENSOR_LIST(H60_DECLARE_TEXT_SENSOR, )

    // esphome::binary_sensor::BinarySensor *connected_sensor_;
    // esphome::sensor::Sensor *connection_count_sensor_;

    std::unique_ptr<uint8_t[]> buf_{};
    size_t buf_head_{0};
    size_t buf_tail_{0};
};

}  // namespace h60_interface
}  // namespace esphome